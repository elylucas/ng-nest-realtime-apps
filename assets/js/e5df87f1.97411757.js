"use strict";(self.webpackChunkguide_generator=self.webpackChunkguide_generator||[]).push([[82],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),l=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,c=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(n),h=a,d=m["".concat(i,".").concat(h)]||m[h]||u[h]||c;return n?r.createElement(d,o(o({ref:t},p),{},{components:n})):r.createElement(d,o({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var c=n.length,o=new Array(c);o[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<c;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2776:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>c,metadata:()=>s,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const c={sidebar_position:2},o="Socket Connections",s={unversionedId:"lab2/SocketConnections",id:"lab2/SocketConnections",title:"Socket Connections",description:"SocketIO connection events connect/disconnect",source:"@site/docs/lab2/SocketConnections.md",sourceDirName:"lab2",slug:"/lab2/SocketConnections",permalink:"/ng-nest-realtime-apps/lab2/SocketConnections",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/ng-nest-realtime-apps/lab2/getting_started"},next:{title:"Joining and Leaving Rooms",permalink:"/ng-nest-realtime-apps/lab2/Rooms"}},i={},l=[{value:"Nest",id:"nest",level:2},{value:"Chat Service",id:"chat-service",level:3},{value:"Chat Gateway",id:"chat-gateway",level:3},{value:"Angular",id:"angular",level:2},{value:"Update app component html",id:"update-app-component-html",level:3}],p={toc:l};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"socket-connections"},"Socket Connections"),(0,a.kt)("p",null,"SocketIO connection events connect/disconnect"),(0,a.kt)("p",null,"To start, we will work on making a connection to the Nest server and identifying\nthe user with the app."),(0,a.kt)("h2",{id:"nest"},"Nest"),(0,a.kt)("h3",{id:"chat-service"},"Chat Service"),(0,a.kt)("p",null,"update chat service to hold users:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./server/src/chat/chat.service.ts",title:"./server/src/chat/chat.service.ts"},"import { Injectable } from '@nestjs/common';\n\nexport interface Message {\n  user: string;\n  content: string;\n}\n\n@Injectable()\nexport class ChatService {\n  users: Record<string, string> = {};\n\n  identify(user: string, clientId: string) {\n    this.users[user] = clientId;\n  }\n\n  disconnect(clientId: string) {\n    //look up user by clientId:\n    const users = Object.keys(this.users);\n    let userToRemove = '';\n    users.forEach((user) => {\n      if (this.users[user] === clientId) {\n        userToRemove = user;\n        return;\n      }\n    });\n    if (userToRemove) {\n      delete this.users[userToRemove];\n    }\n  }\n}\n")),(0,a.kt)("h3",{id:"chat-gateway"},"Chat Gateway"),(0,a.kt)("p",null,"update chat gateway:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./server/src/chat.gateway.ts",title:"./server/src/chat.gateway.ts"},"import { SubscribeMessage, WebSocketGateway } from '@nestjs/websockets';\nimport { ChatService } from './chat/chat.service';\nimport { Socket } from 'socket.io';\n\n@WebSocketGateway({ namespace: 'chat', cors: true })\nexport class ChatGateway {\n  constructor(private chatService: ChatService) {}\n\n  @SubscribeMessage('identify')\n  async handleIdentify(client: Socket, user: string) {\n    this.chatService.identify(user, client.id);\n  }\n\n  @SubscribeMessage('disconnect')\n  async handleDisconnect(client: Socket) {\n    this.chatService.disconnect(client.id);\n  }\n}\n")),(0,a.kt)("h2",{id:"angular"},"Angular"),(0,a.kt)("p",null,"setup chat service:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./client/src/app/chat.service.ts",title:"./client/src/app/chat.service.ts"},"import { Injectable } from '@angular/core';\nimport { BehaviorSubject, combineLatest, map, Observable } from 'rxjs';\nimport { io, Socket } from 'socket.io-client';\n\nexport interface ChatAppData {\n  connected: boolean;\n  user: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ChatService {\n  private url = 'http://localhost:3000/chat';\n  private client: Socket;\n  private $connected = new BehaviorSubject(false);\n  private $user = new BehaviorSubject('');\n\n  constructor() {\n    this.client = io(this.url, { autoConnect: false });\n\n    this.client.on('connect', () => {\n      this.client.emit('identify', this.$user.value);\n      this.$connected.next(true);\n    });\n    this.client.on('disconnect', () => {\n      this.$connected.next(false);\n    });\n\n    const user = localStorage.getItem('user') || '';\n    if (user) {\n      this.connect(user);\n    }\n  }\n\n  getChatAppData(): Observable<ChatAppData> {\n    const data = combineLatest([this.$connected, this.$user]).pipe(\n      map((value) => {\n        const [connected, user] = value;\n        return {\n          connected,\n          user,\n        };\n      })\n    );\n    return data;\n  }\n\n  connect(user: string) {\n    if (this.client.connected) {\n      return;\n    }\n    localStorage.setItem('user', user);\n    this.$user.next(user);\n    this.client.connect();\n  }\n\n  disconnect() {\n    localStorage.removeItem('user');\n    this.client.disconnect();\n    this.$user.next('');\n  }\n}\n")),(0,a.kt)("p",null,"setup app component:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./client/src/app/app.component.ts",title:"./client/src/app/app.component.ts"},"import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ChatAppData, ChatService } from './chat.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent implements OnInit {\n  message = '';\n  user = '';\n  $chatAppData!: Observable<ChatAppData>;\n\n  constructor(private chatService: ChatService) {}\n\n  ngOnInit(): void {\n    this.$chatAppData = this.chatService.getChatAppData();\n  }\n\n  connect() {\n    if (this.user) {\n      this.chatService.connect(this.user);\n    }\n  }\n\n  disconnect() {\n    this.user = '';\n    this.chatService.disconnect();\n  }\n\n  sendMessage() {}\n}\n")),(0,a.kt)("h3",{id:"update-app-component-html"},"Update app component html"),(0,a.kt)("p",null,"change lines 1 + 2 to use chatAppData top ng-container to "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},'<ng-container *ngIf="$chatAppData | async as data">\n  <div *ngIf="data.connected; else login">\n')),(0,a.kt)("p",null,"update welcome on line 24 to use user variable"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},'<div class="user">Welcome {{ data.user }}, Room room</div>\n')),(0,a.kt)("p",null,"Run the app, see it work for connecting/disconnecting"))}u.isMDXComponent=!0}}]);