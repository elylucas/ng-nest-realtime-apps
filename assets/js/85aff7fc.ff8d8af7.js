"use strict";(self.webpackChunkguide_generator=self.webpackChunkguide_generator||[]).push([[236],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var i=a.createContext({}),p=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),h=p(n),u=s,m=h["".concat(i,".").concat(u)]||h[u]||d[u]||o;return n?a.createElement(m,r(r({ref:t},c),{},{components:n})):a.createElement(m,r({ref:t},c))}));function u(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,r=new Array(o);r[0]=h;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:s,r[1]=l;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},7704:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(7462),s=(n(7294),n(3905));const o={sidebar_position:1},r="Lab1 - Echo Client",l={unversionedId:"lab1",id:"lab1",title:"Lab1 - Echo Client",description:'In this lab we will build the "hello world" of websocket apps, an echo server',source:"@site/docs/lab1.md",sourceDirName:".",slug:"/lab1",permalink:"/ng-nest-realtime-apps/lab1",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/ng-nest-realtime-apps/"},next:{title:"Getting Started",permalink:"/ng-nest-realtime-apps/lab2/getting_started"}},i={},p=[{value:"Required Dependencies",id:"required-dependencies",level:2},{value:"Nest Gateway",id:"nest-gateway",level:2},{value:"Angular",id:"angular",level:2}],c={toc:p};function d(e){let{components:t,...o}=e;return(0,s.kt)("wrapper",(0,a.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"lab1---echo-client"},"Lab1 - Echo Client"),(0,s.kt)("p",null,'In this lab we will build the "hello world" of websocket apps, an echo server\nthat will simply reply back any text that a client sends to it.'),(0,s.kt)("p",null,"To get started, checkout the ",(0,s.kt)("inlineCode",{parentName:"p"},"lab1-start")," branch:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"git checkout lab1-start\n")),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"To view a completed version of this lab, checkout the ",(0,s.kt)("inlineCode",{parentName:"p"},"lab1-complete")," branch.")),(0,s.kt)("h2",{id:"required-dependencies"},"Required Dependencies"),(0,s.kt)("p",null,"This lab is already set up with all the dependencies you will require, so no\nneed to install anything additional. However, in order to use websockets with\nAngular and NestJS in a new app, a few additional dependencies need to be\ninstalled beyond the basic project setup:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Angular: ",(0,s.kt)("inlineCode",{parentName:"li"},"socket-io.client")),(0,s.kt)("li",{parentName:"ul"},"NestJS: ",(0,s.kt)("inlineCode",{parentName:"li"},"@nestjs/platform-socket.io")," and ",(0,s.kt)("inlineCode",{parentName:"li"},"@nestjs/platform-socket.io"))),(0,s.kt)("p",null,"Visit the ",(0,s.kt)("a",{parentName:"p",href:"https://docs.nestjs.com/websockets/gateways"},"NestJS Websocket guide"),"\nfor more info."),(0,s.kt)("h2",{id:"nest-gateway"},"Nest Gateway"),(0,s.kt)("p",null,"Let's start off by scaffolding a new gateway in the ",(0,s.kt)("strong",{parentName:"p"},"server")," folder:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell",metastring:"title='./server'",title:"'./server'"},"nest generate gateway echo\n")),(0,s.kt)("p",null,"This will generate a ",(0,s.kt)("inlineCode",{parentName:"p"},"EchoGateway")," class which looks like:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./server/src/echo.gateway.ts",title:"./server/src/echo.gateway.ts"},"import { SubscribeMessage, WebSocketGateway } from '@nestjs/websockets';\n\n@WebSocketGateway()\nexport class EchoGateway {\n  @SubscribeMessage('message')\n  handleMessage(client: any, payload: any): string {\n    return 'Hello world!';\n  }\n}\n")),(0,s.kt)("p",null,"A gateway is a NestJS abstraction around setting up a realtime communication\nsocket. They are analogous to controllers for API endpoints. They are JavaScript\nclasses that are decorated with ",(0,s.kt)("inlineCode",{parentName:"p"},"@WebSocketGateway()"),". Under the hood, NestJS is\nusing either the ",(0,s.kt)("a",{parentName:"p",href:"https://socket.io/"},"socket-io")," library (which we use in this\ncourse) or the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/websockets/ws"},"ws")," library."),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"@SubscribeMessage()")," decorator on a method designates that method as the\nhandler for an incoming message. You pass in the string of the event name to\nlisten, which the client also designates when sending a message."),(0,s.kt)("p",null,'The parameters passed into the method are the socket client and any data that\nwas sent along with the message. To make the gateway "echo" what was sent it,\ninstead of returning the hard coded "Hello world!" string, we\'ll return the\npayload instead. Update the method to do so:'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./server/src/echo.gateway.ts",title:"./server/src/echo.gateway.ts"},"import { SubscribeMessage, WebSocketGateway } from '@nestjs/websockets';\nimport { Socket } from 'socket.io';\n\n@WebSocketGateway()\nexport class EchoGateway {\n  @SubscribeMessage('message')\n  //highlight-start\n  handleMessage(client: Socket, payload: string): string {\n    return payload;\n  }\n  //highlight-end\n}\n")),(0,s.kt)("p",null,"We also updated the method signature to provide the proper types we expect\ninstead of using ",(0,s.kt)("inlineCode",{parentName:"p"},"any"),"."),(0,s.kt)("p",null,"Lastly, we need to enable the websocket to work with clients on other domains by\nenabling CORS. To do so, we can pass in the option to the ",(0,s.kt)("inlineCode",{parentName:"p"},"@WebSocketGateway()"),"\ndecorator:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./server/src/echo.gateway.ts",title:"./server/src/echo.gateway.ts"},"@WebSocketGateway({ cors: true })\n")),(0,s.kt)("p",null,"That's it for the server stuff, let's take a look at the client next."),(0,s.kt)("h2",{id:"angular"},"Angular"),(0,s.kt)("p",null,"We'll do this demo in the main app component. Open up ",(0,s.kt)("strong",{parentName:"p"},"app.component.ts")," and\nadd the following import at the top:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./client/src/app/app.component.ts",title:"./client/src/app/app.component.ts"},"import { io } from 'socket.io-client';\n")),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"io")," object creates new connection to our server and gives us back a client\nof type ",(0,s.kt)("inlineCode",{parentName:"p"},"Socket")," that we can use to send messages to the server."),(0,s.kt)("p",null,"Next, in the ",(0,s.kt)("inlineCode",{parentName:"p"},"AppComponent")," class, we will create a few variables: a ",(0,s.kt)("inlineCode",{parentName:"p"},"message"),"\nstring that will be bound to the text input, a ",(0,s.kt)("inlineCode",{parentName:"p"},"returnedResponses")," array that\nwill contain the responses from the server, and the socket-io client. We\ninitialize the client by calling ",(0,s.kt)("inlineCode",{parentName:"p"},"io")," and passing in the URL of the server."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./client/src/app/app.component.ts",title:"./client/src/app/app.component.ts"},"export class AppComponent {\n  message = '';\n  returnedResponses: string[] = [];\n  client = io('http://localhost:3000');\n}\n")),(0,s.kt)("p",null,"If you were to take a look at the app now, open up dev tools and look at the WS\n(for websockets) tab. You will see a connection being established:"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Dev Tools WebSocket",src:n(4912).Z,width:"2430",height:"1100"})),(0,s.kt)("p",null,"Now it's time to send a message across that connection. Back in the app\ncomponent, add the following ",(0,s.kt)("inlineCode",{parentName:"p"},"sendMessage")," method to the class:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./client/src/app/app.component.ts",title:"./client/src/app/app.component.ts"},"sendMessage() {\n  this.client.emit('message', this.message, (msg: string) => {\n    this.returnedResponses.push(msg)\n  });\n}\n")),(0,s.kt)("p",null,"The Socket client ",(0,s.kt)("inlineCode",{parentName:"p"},"emit")," method takes the event name ('message' in our case),\nthe payload of the event, and a callback. Remember when we returned the payload\nfrom ",(0,s.kt)("inlineCode",{parentName:"p"},"handleMessage()")," in the Nest gateway? That response gets passed back to\nthe callback."),(0,s.kt)("p",null,"The next step is updating the app component's template to have a input box and\nbutton to send the message. Replace the welcome message in\n",(0,s.kt)("strong",{parentName:"p"},"app.componenent.html")," with the following:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-html",metastring:"title=./client/src/app/app.component.html",title:"./client/src/app/app.component.html"},'<div>\n  <label\n    >Message\n    <input type="text" name="messasge" [(ngModel)]="message" />\n  </label>\n  <button type="button" (click)="sendMessage()">Send</button>\n  <ul>\n    <li *ngFor="let message of returnedResponses">{{ message }}</li>\n  </ul>\n</div>\n')),(0,s.kt)("p",null,"Here we have a input that is bound to ",(0,s.kt)("inlineCode",{parentName:"p"},"message"),", a button that calls ",(0,s.kt)("inlineCode",{parentName:"p"},"sendMessage")," when clicked, and a list for each item currently in the ",(0,s.kt)("inlineCode",{parentName:"p"},"returnResponses")," array."),(0,s.kt)("p",null,"Now the app echo demo should be fully functional. Give it a try!"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Echo Client Running",src:n(2058).Z,width:"1224",height:"544"})))}d.isMDXComponent=!0},4912:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/dev-tools-websocket-40b3480aeca67ea117f0bac2a2c5adc1.jpg"},2058:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/echo-client-running-fc6c9e89bb8b2c3af0902cfbbe60650d.jpg"}}]);