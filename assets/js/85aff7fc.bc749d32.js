"use strict";(self.webpackChunkguide_generator=self.webpackChunkguide_generator||[]).push([[236],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(n),m=s,u=d["".concat(l,".").concat(m)]||d[m]||h[m]||r;return n?a.createElement(u,o(o({ref:t},c),{},{components:n})):a.createElement(u,o({ref:t},c))}));function m(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,o=new Array(r);o[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,o[1]=i;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7704:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var a=n(7462),s=(n(7294),n(3905));const r={sidebar_position:1},o="Lab1 - Echo Client",i={unversionedId:"lab1",id:"lab1",title:"Lab1 - Echo Client",description:'In this lab, we will build the "hello world" of websocket apps, an echo server',source:"@site/docs/lab1.md",sourceDirName:".",slug:"/lab1",permalink:"/ng-nest-realtime-apps/lab1",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/ng-nest-realtime-apps/"},next:{title:"Getting Started",permalink:"/ng-nest-realtime-apps/lab2/getting_started"}},l={},p=[{value:"Required Dependencies",id:"required-dependencies",level:2},{value:"Nest Gateway",id:"nest-gateway",level:2},{value:"Angular",id:"angular",level:2}],c={toc:p};function h(e){let{components:t,...r}=e;return(0,s.kt)("wrapper",(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"lab1---echo-client"},"Lab1 - Echo Client"),(0,s.kt)("p",null,'In this lab, we will build the "hello world" of websocket apps, an echo server\nthat will reply any text that a client sends to it.'),(0,s.kt)("p",null,"To get started, checkout the ",(0,s.kt)("inlineCode",{parentName:"p"},"lab1-start")," branch:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"git checkout lab1-start\n")),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"You can find a completed version of this lab in the\n",(0,s.kt)("a",{parentName:"p",href:"https://github.com/elylucas/ng-nest-realtime-apps/tree/lab1-complete"},"lab1-complete"),"\nbranch.")),(0,s.kt)("h2",{id:"required-dependencies"},"Required Dependencies"),(0,s.kt)("p",null,"This lab is set up with all the dependencies you will require, so there is no\nneed to install anything additional."),(0,s.kt)("p",null,"Visit the ",(0,s.kt)("a",{parentName:"p",href:"https://docs.nestjs.com/websockets/gateways"},"NestJS Websocket guide"),"\nfor more information on setting up Socket.IO in a new project."),(0,s.kt)("h2",{id:"nest-gateway"},"Nest Gateway"),(0,s.kt)("p",null,"Let's start by scaffolding a new gateway in the ",(0,s.kt)("strong",{parentName:"p"},"server")," folder:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell",metastring:"title='./server'",title:"'./server'"},"nest generate gateway echo\n")),(0,s.kt)("p",null,"This will generate an ",(0,s.kt)("inlineCode",{parentName:"p"},"EchoGateway")," class which looks like:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./server/src/echo.gateway.ts",title:"./server/src/echo.gateway.ts"},"import { SubscribeMessage, WebSocketGateway } from '@nestjs/websockets';\n\n@WebSocketGateway()\nexport class EchoGateway {\n  @SubscribeMessage('message')\n  handleMessage(client: any, payload: any): string {\n    return 'Hello world!';\n  }\n}\n")),(0,s.kt)("p",null,"A gateway is a NestJS abstraction around setting up a real-time communication\nsocket. Gateways are analogous to controllers for API endpoints. They are\nJavaScript classes that are decorated with ",(0,s.kt)("inlineCode",{parentName:"p"},"@WebSocketGateway()"),". Under the\nhood, NestJS is using either the ",(0,s.kt)("a",{parentName:"p",href:"https://socket.io/"},"socket-io")," library (which\nwe use in this course) or the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/websockets/ws"},"ws")," library."),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"@SubscribeMessage()")," decorator on a method designates that method as the\nhandler for an incoming message. You pass in the event name string to listen\nfor, which the client also designates when sending a message."),(0,s.kt)("p",null,'The parameters passed into the method are the socket client and any data sent\nalong with the message. To make the gateway "echo" what was sent, return the\npayload instead of the hard-coded "hello world" string:'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./server/src/echo.gateway.ts",title:"./server/src/echo.gateway.ts"},"import { SubscribeMessage, WebSocketGateway } from '@nestjs/websockets';\nimport { Socket } from 'socket.io';\n\n@WebSocketGateway()\nexport class EchoGateway {\n  @SubscribeMessage('message')\n  //highlight-start\n  handleMessage(client: Socket, payload: string): string {\n    return payload;\n  }\n  //highlight-end\n}\n")),(0,s.kt)("p",null,"Lastly, we need to enable the websocket to work with clients on other domains by\nenabling CORS. To do so, we can pass in the option to the ",(0,s.kt)("inlineCode",{parentName:"p"},"@WebSocketGateway()"),"\ndecorator:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./server/src/echo.gateway.ts",title:"./server/src/echo.gateway.ts"},"@WebSocketGateway({ cors: true })\n")),(0,s.kt)("p",null,"That's it for the server stuff; let's look at the client next."),(0,s.kt)("h2",{id:"angular"},"Angular"),(0,s.kt)("p",null,"We'll do this demo in the main app component. Open up ",(0,s.kt)("strong",{parentName:"p"},"app.component.ts")," and\nadd the following import at the top:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./client/src/app/app.component.ts",title:"./client/src/app/app.component.ts"},"import { io } from 'socket.io-client';\n")),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"io")," object creates a new connection to our server and gives us back a\nclient of type ",(0,s.kt)("inlineCode",{parentName:"p"},"Socket")," that we can use to send messages to the server."),(0,s.kt)("p",null,"Next, in the ",(0,s.kt)("inlineCode",{parentName:"p"},"AppComponent")," class, we will create a few variables: a ",(0,s.kt)("inlineCode",{parentName:"p"},"message"),"\nstring that will bind to the text input, a ",(0,s.kt)("inlineCode",{parentName:"p"},"returnedResponses")," array containing\nthe server's responses, and the Socket.IO client. We initialize the client by\ncalling ",(0,s.kt)("inlineCode",{parentName:"p"},"io")," and passing in the URL of the server."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./client/src/app/app.component.ts",title:"./client/src/app/app.component.ts"},"export class AppComponent {\n  message = '';\n  returnedResponses: string[] = [];\n  client = io('http://localhost:3000');\n}\n")),(0,s.kt)("p",null,"Look at the app now, and open up the dev tools. Go to the WS (for websockets)\nsection of the Network tab. You will see a connection has been established:"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Dev Tools WebSocket",src:n(4912).Z,width:"2430",height:"1100"})),(0,s.kt)("p",null,"Now it's time to send a message across that connection. Back in the app\ncomponent, add the following ",(0,s.kt)("inlineCode",{parentName:"p"},"sendMessage")," method to the class:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./client/src/app/app.component.ts",title:"./client/src/app/app.component.ts"},"sendMessage() {\n  this.client.emit('message', this.message, (msg: string) => {\n    this.returnedResponses.push(msg)\n  });\n}\n")),(0,s.kt)("p",null,"The Socket client ",(0,s.kt)("inlineCode",{parentName:"p"},"emit")," method takes the event name ('message' in our case),\nthe payload of the event, and a callback. Remember when we returned the payload\nfrom ",(0,s.kt)("inlineCode",{parentName:"p"},"handleMessage()")," in the Nest gateway? That response gets passed back to\nthe callback."),(0,s.kt)("p",null,"The next step is updating the app component's template with an input box and\nbutton to send the message. Replace the welcome message in\n",(0,s.kt)("strong",{parentName:"p"},"app.componenent.html")," with the following:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-html",metastring:"title=./client/src/app/app.component.html",title:"./client/src/app/app.component.html"},'<div>\n  <label\n    >Message\n    <input type="text" name="messasge" [(ngModel)]="message" />\n  </label>\n  <button type="button" (click)="sendMessage()">Send</button>\n  <ul>\n    <li *ngFor="let message of returnedResponses">{{ message }}</li>\n  </ul>\n</div>\n')),(0,s.kt)("p",null,"Here we have an input bound to ",(0,s.kt)("inlineCode",{parentName:"p"},"message"),", a button that calls ",(0,s.kt)("inlineCode",{parentName:"p"},"sendMessage")," when\nclicked, and a list for each item currently in the ",(0,s.kt)("inlineCode",{parentName:"p"},"returnResponses")," array."),(0,s.kt)("p",null,"Now the app echo demo should be fully functional. Give it a try!"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Echo Client Running",src:n(2058).Z,width:"1224",height:"544"})))}h.isMDXComponent=!0},4912:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/dev-tools-websocket-40b3480aeca67ea117f0bac2a2c5adc1.jpg"},2058:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/echo-client-running-fc6c9e89bb8b2c3af0902cfbbe60650d.jpg"}}]);