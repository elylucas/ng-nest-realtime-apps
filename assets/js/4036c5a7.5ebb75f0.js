"use strict";(self.webpackChunkguide_generator=self.webpackChunkguide_generator||[]).push([[593],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=l(n),h=r,d=u["".concat(c,".").concat(h)]||u[h]||m[h]||s;return n?a.createElement(d,i(i({ref:t},p),{},{components:n})):a.createElement(d,i({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=u;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var l=2;l<s;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8677:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const s={},i=void 0,o={type:"mdx",permalink:"/ng-nest-realtime-apps/demo2",source:"@site/src/pages/demo2.md",description:"Chat App Demo",frontMatter:{}},c=[{value:"Chat App Demo",id:"chat-app-demo",level:2},{value:"Part 1 - Setup &amp; Connections",id:"part-1---setup--connections",level:2},{value:"Scaffolding",id:"scaffolding",level:3},{value:"Nest",id:"nest",level:3},{value:"Create ChatService",id:"create-chatservice",level:4},{value:"Update ChatGateway",id:"update-chatgateway",level:4},{value:"Angular",id:"angular",level:3},{value:"Create ChatService",id:"create-chatservice-1",level:4},{value:"Update AppComponent",id:"update-appcomponent",level:4},{value:"Update Template",id:"update-template",level:4},{value:"Part 2 - Joining Rooms",id:"part-2---joining-rooms",level:2},{value:"Nest",id:"nest-1",level:3},{value:"Update ChatService",id:"update-chatservice",level:4},{value:"Update ChatGateway",id:"update-chatgateway-1",level:4},{value:"Angular",id:"angular-1",level:3},{value:"Update ChatService",id:"update-chatservice-1",level:4},{value:"Update AppComponent",id:"update-appcomponent-1",level:4},{value:"Update Template",id:"update-template-1",level:4}],l={toc:c};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"chat-app-demo"},"Chat App Demo"),(0,r.kt)("h2",{id:"part-1---setup--connections"},"Part 1 - Setup & Connections"),(0,r.kt)("h3",{id:"scaffolding"},"Scaffolding"),(0,r.kt)("p",null,"scaffold nest pieces"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:"title=./server",title:"./server"},"nest g service chat\nnest g gateway chat\n")),(0,r.kt)("p",null,"scaffold ng pieces"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:"title=./client",title:"./client"},"ng g service chat\n")),(0,r.kt)("h3",{id:"nest"},"Nest"),(0,r.kt)("h4",{id:"create-chatservice"},"Create ChatService"),(0,r.kt)("p",null,"update chat service:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./server/src/chat/chat.service.ts",title:"./server/src/chat/chat.service.ts"},"import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class ChatService {\n  users: Record<string, string> = {};\n\n  identify(user: string, clientId: string) {\n    this.users[user] = clientId;\n  }\n\n  disconnect(clientId: string) {\n    //look up user by clientId:\n    const users = Object.keys(this.users);\n    let userToRemove = '';\n    users.forEach((user) => {\n      if (this.users[user] === clientId) {\n        userToRemove = user;\n        return;\n      }\n    });\n    if (userToRemove) {\n      delete this.users[userToRemove];\n    }\n    return userToRemove;\n  }\n}\n")),(0,r.kt)("h4",{id:"update-chatgateway"},"Update ChatGateway"),(0,r.kt)("p",null,"update ",(0,r.kt)("inlineCode",{parentName:"p"},"@WebsockeGateway")," to use cors:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./server/src/echo.gateway.ts",title:"./server/src/echo.gateway.ts"},"@WebSocketGateway({ namespace: 'chat', cors: true })\n")),(0,r.kt)("p",null,"remove ",(0,r.kt)("inlineCode",{parentName:"p"},"handleMessage")),(0,r.kt)("p",null,"inject chatService"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./server/src/echo.gateway.ts",title:"./server/src/echo.gateway.ts"},"constructor(private chatService: ChatService) {}\n")),(0,r.kt)("p",null,"add ",(0,r.kt)("inlineCode",{parentName:"p"},"identify"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"disconnect")," handlers"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./server/src/echo.gateway.ts",title:"./server/src/echo.gateway.ts"},"@SubscribeMessage('identify')\nasync handleIdentify(client: Socket, user: string) {\n  this.chatService.identify(user, client.id);\n}\n\n@SubscribeMessage('disconnect')\nasync handleDisconnect(client: Socket) {\n  this.chatService.disconnect(client.id);\n}\n")),(0,r.kt)("h3",{id:"angular"},"Angular"),(0,r.kt)("h4",{id:"create-chatservice-1"},"Create ChatService"),(0,r.kt)("p",null,"update chat service to following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./client/src/app/chat.service.ts",title:"./client/src/app/chat.service.ts"},"import { Injectable } from '@angular/core';\nimport { BehaviorSubject, combineLatest, map, Observable } from 'rxjs';\n\nexport interface ChatAppData {\n  connected: boolean;\n  user: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ChatService {\n  private connected$ = new BehaviorSubject(false);\n  private user$ = new BehaviorSubject('');\n\n  constructor() {}\n\n  getChatAppData(): Observable<ChatAppData> {\n    const data = combineLatest([this.connected$, this.user$]).pipe(\n      map((value) => {\n        const [connected, user] = value;\n        return {\n          connected,\n          user,\n        };\n      })\n    );\n    return data;\n  }\n}\n")),(0,r.kt)("p",null,"add members:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./client/src/app/chat.service.ts",title:"./client/src/app/chat.service.ts"},"private url = 'http://localhost:3000/chat';\nprivate client: Socket;\n")),(0,r.kt)("p",null,"update constructor"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./client/src/app/chat.service.ts",title:"./client/src/app/chat.service.ts"},"constructor() {\n    this.client = io(this.url, { autoConnect: false });\n\n    this.client.on('connect', () => {\n      this.client.emit('identify', this.user$.value);\n      this.connected$.next(true);\n    });\n    this.client.on('disconnect', () => {\n      this.connected$.next(false);\n    });\n\n    const user = localStorage.getItem('user') || '';\n    if (user) {\n      this.connect(user);\n    }\n  }\n")),(0,r.kt)("p",null,"add ",(0,r.kt)("inlineCode",{parentName:"p"},"connect"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"disconnect")," methods"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./client/src/app/chat.service.ts",title:"./client/src/app/chat.service.ts"},"connect(user: string) {\n  if (this.client.connected) {\n    return;\n  }\n  localStorage.setItem('user', user);\n  this.user$.next(user);\n  this.client.connect();\n}\n\ndisconnect() {\n  localStorage.removeItem('user');\n  this.client.disconnect();\n  this.user$.next('');\n}\n")),(0,r.kt)("h4",{id:"update-appcomponent"},"Update AppComponent"),(0,r.kt)("p",null,"add ",(0,r.kt)("inlineCode",{parentName:"p"},"chatAddData$")," member:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./client/src/app/app.component.ts",title:"./client/src/app/app.component.ts"},"chatAppData$!: Observable<ChatAppData>;\n")),(0,r.kt)("p",null,"update ctor:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./client/src/app/app.component.ts",title:"./client/src/app/app.component.ts"},"constructor(private chatService: ChatService) {}\n")),(0,r.kt)("p",null,"add ",(0,r.kt)("inlineCode",{parentName:"p"},"ngOnInit"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"connect"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"disconnect")," methods"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./client/src/app/app.component.ts",title:"./client/src/app/app.component.ts"},"ngOnInit(): void {\n  //highlight-next-line\n  this.chatAppData$ = this.chatService.getChatAppData();\n}\n\n//highlight-start\nconnect() {\n  if (this.user) {\n    this.chatService.connect(this.user);\n  }\n}\n\ndisconnect() {\n  this.user = '';\n  this.chatService.disconnect();\n}\n//highlight-end\n")),(0,r.kt)("h4",{id:"update-template"},"Update Template"),(0,r.kt)("p",null,"update ",(0,r.kt)("inlineCode",{parentName:"p"},"ng-container")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html",metastring:"title=./client/src/app/app.component.html",title:"./client/src/app/app.component.html"},'<ng-container *ngIf="chatAppData$ | async as data"></ng-container>\n')),(0,r.kt)("p",null,"update div"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html",metastring:"title=./client/src/app/app.component.html",title:"./client/src/app/app.component.html"},'<div *ngIf="data.connected; else login"></div>\n')),(0,r.kt)("p",null,"update hard coded user"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html",metastring:"title=./client/src/app/app.component.html",title:"./client/src/app/app.component.html"},'<div class="user">Welcome {{ data.user }}, Room room</div>\n')),(0,r.kt)("h2",{id:"part-2---joining-rooms"},"Part 2 - Joining Rooms"),(0,r.kt)("h3",{id:"nest-1"},"Nest"),(0,r.kt)("h4",{id:"update-chatservice"},"Update ChatService"),(0,r.kt)("p",null,"add interfaces"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./server/src/chat/chat.service.ts",title:"./server/src/chat/chat.service.ts"},"export interface Message {\n  user: string;\n  content: string;\n}\n\nexport interface ChatRoom {\n  users: string[];\n  messages: Message[];\n}\n")),(0,r.kt)("p",null,"store chatroom data"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./server/src/chat/chat.service.ts",title:"./server/src/chat/chat.service.ts"},"chatRooms: Record<string, ChatRoom> = {\n  General: { users: [], messages: [] },\n  Angular: { users: [], messages: [] },\n  NestJS: { users: [], messages: [] },\n};\n")),(0,r.kt)("p",null,"add ",(0,r.kt)("inlineCode",{parentName:"p"},"joinRoom"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"leaveRoom")," methods"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./server/src/chat/chat.service.ts",title:"./server/src/chat/chat.service.ts"},"joinRoom(room: string, user: string) {\n  this.chatRooms[room].users.push(user);\n  // sort the users alphabetically\n  this.chatRooms[room].users.sort((a, b) => {\n    return a.toLowerCase() >= b.toLowerCase() ? 1 : -1;\n  });\n}\n\nleaveRoom(room: string, user: string) {\n  this.chatRooms[room].users = this.chatRooms[room].users.filter(\n    (u) => u !== user,\n  );\n}\n")),(0,r.kt)("p",null,"add ",(0,r.kt)("inlineCode",{parentName:"p"},"getChatRoom"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"getChatRooms")," methods"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./server/src/chat/chat.service.ts",title:"./server/src/chat/chat.service.ts"},"getChatRoom(room: string) {\n  return this.chatRooms[room];\n}\n\ngetChatRooms() {\n  const keys = Object.keys(this.chatRooms);\n  return keys;\n}\n")),(0,r.kt)("p",null,"remove users from room upon disconnection (right underneath\n",(0,r.kt)("inlineCode",{parentName:"p"},"delete this.users[userToRemove]"),")"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./server/src/chat/chat.service.ts",title:"./server/src/chat/chat.service.ts"},"// remove user from any joined rooms\nconst rooms = Object.keys(this.chatRooms);\nrooms.forEach((room) => {\n  this.leaveRoom(room, userToRemove);\n});\n")),(0,r.kt)("h4",{id:"update-chatgateway-1"},"Update ChatGateway"),(0,r.kt)("p",null,"return rooms after identify (right underneath ",(0,r.kt)("inlineCode",{parentName:"p"},"this.chatService.indentify()")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./server/src/chat.gateway.ts",title:"./server/src/chat.gateway.ts"},"return this.chatService.getChatRooms();\n")),(0,r.kt)("p",null,"add ",(0,r.kt)("inlineCode",{parentName:"p"},"joinRoom"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"leaveRoom")," handlers"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./server/src/chat.gateway.ts",title:"./server/src/chat.gateway.ts"},"@SubscribeMessage('joinRoom')\nhandleJoinRoom(client: Socket, data: { user: string; room: string }) {\n  this.chatService.joinRoom(data.room, data.user);\n  client.join(data.room);\n  client.to(data.room).emit('userJoined', data.user);\n  return this.chatService.getChatRoom(data.room);\n}\n\n@SubscribeMessage('leaveRoom')\nhandleLeaveRoom(client: Socket, data: { user: string; room: string }) {\n  this.chatService.leaveRoom(data.room, data.user);\n  client.leave(data.room);\n  client.to(data.room).emit('userLeft', data.user);\n}\n")),(0,r.kt)("p",null,"update ",(0,r.kt)("inlineCode",{parentName:"p"},"handleDisconnect")," method (replace contents)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./server/src/chat.gateway.ts",title:"./server/src/chat.gateway.ts"},"const user = this.chatService.disconnect(client.id);\nclient.broadcast.emit('userLeft', user);\n")),(0,r.kt)("h3",{id:"angular-1"},"Angular"),(0,r.kt)("h4",{id:"update-chatservice-1"},"Update ChatService"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./client/src/app/chat.service.ts",title:"./client/src/app/chat.service.ts"},"export interface Message {\n  user: string;\n  content: string;\n}\n\nexport interface ChatRoom {\n  users: string[];\n  messages: Message[];\n}\n")),(0,r.kt)("p",null,"update ",(0,r.kt)("inlineCode",{parentName:"p"},"ChatAppData")," interface"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./client/src/app/chat.service.ts",title:"./client/src/app/chat.service.ts"},"export interface ChatAppData {\n  //highlight-next-line\n  activeRoom: string;\n  //highlight-next-line\n  chatRoom: ChatRoom;\n  connected: boolean;\n  //highlight-next-line\n  rooms: string[];\n  user: string;\n}\n")),(0,r.kt)("p",null,"add new observables after ",(0,r.kt)("inlineCode",{parentName:"p"},"$users")," var"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./client/src/app/chat.service.ts",title:"./client/src/app/chat.service.ts"},"private activeRoom$ = new BehaviorSubject('General');\nprivate chatRoom$ = new BehaviorSubject<ChatRoom>({\n  users: [],\n  messages: [],\n});\nprivate rooms$ = new BehaviorSubject<string[]>([]);\n")),(0,r.kt)("p",null,"replace ",(0,r.kt)("inlineCode",{parentName:"p"},"getChatAppData")," with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./client/src/app/chat.service.ts",title:"./client/src/app/chat.service.ts"},"getChatAppData(): Observable<ChatAppData> {\n  const data = combineLatest([\n    //highlight-next-line\n    this.activeRoom$,\n    //highlight-next-line\n    this.chatRoom$,\n    this.connected$,\n    //highlight-next-line\n    this.rooms$,\n    this.user$,\n  ]).pipe(\n    map((value) => {\n      //highlight-next-line\n      const [activeRoom, chatRoom, connected, rooms, user] = value;\n      return {\n        //highlight-next-line\n        activeRoom,\n        //highlight-next-line\n        chatRoom,\n        connected,\n        //highlight-next-line\n        rooms,\n        user,\n      };\n    })\n  );\n  return data;\n}\n")),(0,r.kt)("p",null,"replace ",(0,r.kt)("inlineCode",{parentName:"p"},"identify")," emit in the ",(0,r.kt)("inlineCode",{parentName:"p"},"connect")," callback in the ctor:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./client/src/app/chat.service.ts",title:"./client/src/app/chat.service.ts"},"this.client.emit('identify', this.user$.value, (rooms: string[]) => {\n  this.rooms$.next(rooms);\n});\n")),(0,r.kt)("p",null,"add new event listeners after the others in the ctor"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./client/src/app/chat.service.ts",title:"./client/src/app/chat.service.ts"},"this.client.on('userJoined', (user: string) => {\n  const chatRoom = this.chatRoom$.value;\n  if (chatRoom) {\n    chatRoom.users.push(user);\n    // Sort the users alphabetically\n    chatRoom.users.sort((a, b) => {\n      return a.toLowerCase() >= b.toLowerCase() ? 1 : -1;\n    });\n    this.chatRoom$.next(chatRoom);\n  }\n});\nthis.client.on('userLeft', (user: string) => {\n  const chatRoom = this.chatRoom$.value;\n  if (chatRoom) {\n    chatRoom.users = chatRoom.users.filter((u) => u !== user);\n    this.chatRoom$.next(chatRoom);\n  }\n});\n")),(0,r.kt)("p",null,"add methods to ",(0,r.kt)("inlineCode",{parentName:"p"},"joinRoom"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"leaveRoom"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"switchRoom")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./client/src/app/chat.service.ts",title:"./client/src/app/chat.service.ts"},"private joinRoom(room: string) {\n  this.client.emit(\n    'joinRoom',\n    { user: this.user$.value, room },\n    (chatRoom: ChatRoom) => {\n      this.chatRoom$.next(chatRoom);\n    }\n  );\n}\n\nprivate leaveRoom(room: string) {\n  this.client.emit('leaveRoom', { user: this.user$.value, room });\n}\n\nswitchRoom(room: string) {\n  const activeRoom = this.activeRoom$.value;\n  this.leaveRoom(activeRoom);\n  this.joinRoom(room);\n  this.activeRoom$.next(room);\n}\n")),(0,r.kt)("p",null,"add call to ",(0,r.kt)("inlineCode",{parentName:"p"},"joinRoom")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"connect")," method (after ",(0,r.kt)("inlineCode",{parentName:"p"},"client.connect"),")"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./client/src/app/chat.service.ts",title:"./client/src/app/chat.service.ts"},"this.joinRoom(this.activeRoom$.value);\n")),(0,r.kt)("p",null,"add call to ",(0,r.kt)("inlineCode",{parentName:"p"},"leaveRoom")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"disconnect")," method (before call to\n",(0,r.kt)("inlineCode",{parentName:"p"},"this.client.disconnect"),")"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./client/src/app/chat.service.ts",title:"./client/src/app/chat.service.ts"},"this.leaveRoom(this.activeRoom$.value);\n")),(0,r.kt)("h4",{id:"update-appcomponent-1"},"Update AppComponent"),(0,r.kt)("p",null,"add ",(0,r.kt)("inlineCode",{parentName:"p"},"switchRoom")," method"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./client/src/app/app.component.ts",title:"./client/src/app/app.component.ts"},"switchRoom(room: string) {\n  this.chatService.switchRoom(room);\n}\n")),(0,r.kt)("h4",{id:"update-template-1"},"Update Template"),(0,r.kt)("p",null,"around line 7, update room list"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html",metastring:"title=./client/src/app/app.component.html",title:"./client/src/app/app.component.html"},'<ul>\n  <li\n    [ngClass]="{ active: data.activeRoom === room }"\n    (click)="switchRoom(room)"\n    *ngFor="let room of data.rooms"\n  >\n    {{ room }}\n  </li>\n</ul>\n')),(0,r.kt)("p",null,"update user list around line 20"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html",metastring:"title=./client/src/app/app.component.html",title:"./client/src/app/app.component.html"},'<ul>\n  <li *ngFor="let user of data.chatRoom.users">{{ user }}</li>\n</ul>\n')),(0,r.kt)("p",null,"update welcome section with real room name around line 30"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html",metastring:"title=./client/src/app/app.component.html",title:"./client/src/app/app.component.html"},'<div class="user">Welcome {{ user }}, Room {{ data.activeRoom }}</div>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"//joining\nsocket.join('angular');\n//send message to room\n{socket|server}.to('angular').emit('message', 'hello ng peeps!');\n//leaving\nsocket.leave('angular');\n")))}p.isMDXComponent=!0}}]);