"use strict";(self.webpackChunkguide_generator=self.webpackChunkguide_generator||[]).push([[158],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>p});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},m=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),h=c(n),p=a,d=h["".concat(l,".").concat(p)]||h[p]||u[p]||r;return n?o.createElement(d,s(s({ref:t},m),{},{components:n})):o.createElement(d,s({ref:t},m))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var c=2;c<r;c++)s[c]=n[c];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},5454:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var o=n(7462),a=(n(7294),n(3905));const r={sidebar_position:3},s="Joining and Leaving Rooms",i={unversionedId:"lab2/Rooms",id:"lab2/Rooms",title:"Joining and Leaving Rooms",description:"Nest",source:"@site/docs/lab2/Rooms.md",sourceDirName:"lab2",slug:"/lab2/Rooms",permalink:"/ng-nest-realtime-apps/lab2/Rooms",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Socket Connections",permalink:"/ng-nest-realtime-apps/lab2/SocketConnections"},next:{title:"Messaging",permalink:"/ng-nest-realtime-apps/lab2/Messages"}},l={},c=[{value:"Nest",id:"nest",level:2},{value:"Update Chat Service",id:"update-chat-service",level:3},{value:"Update chat gateway",id:"update-chat-gateway",level:3},{value:"Angular",id:"angular",level:2},{value:"Update chat service",id:"update-chat-service-1",level:3},{value:"Update app component",id:"update-app-component",level:3},{value:"update app component html",id:"update-app-component-html",level:3}],m={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"joining-and-leaving-rooms"},"Joining and Leaving Rooms"),(0,a.kt)("h2",{id:"nest"},"Nest"),(0,a.kt)("h3",{id:"update-chat-service"},"Update Chat Service"),(0,a.kt)("p",null,"Add ChatRoom interface at top:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export interface ChatRoom {\n  users: string[];\n  messages: Message[];\n}\n")),(0,a.kt)("p",null,"Add a record to hold chat rooms in class below users member:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"chatRooms: Record<string, ChatRoom> = {\n  General: { users: [], messages: [] },\n  Angular: { users: [], messages: [] },\n  NestJS: { users: [], messages: [] },\n};\n")),(0,a.kt)("p",null,"Add joinRoom/leaveRoom/getChatRoom/getRooms methods to class:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"joinRoom(room: string, user: string) {\n  this.chatRooms[room].users.push(user);\n  this.chatRooms[room].users.sort((a, b) => {\n    return a.toLowerCase() >= b.toLowerCase() ? 1 : -1;\n  });\n}\n\nleaveRoom(room: string, user: string) {\n  this.chatRooms[room].users = this.chatRooms[room].users.filter(\n    (u) => u !== user,\n  );\n}\n\ngetChatRoom(room: string) {\n  return this.chatRooms[room];\n}\n\ngetRooms() {\n  const keys = Object.keys(this.chatRooms);\n  return keys;\n}\n")),(0,a.kt)("p",null,"update disconnect to remove users from rooms and return the user"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"disconnect(clientId: string) {\n  const users = Object.keys(this.users);\n  let userToRemove = '';\n  users.forEach((user) => {\n    if (this.users[user] === clientId) {\n      userToRemove = user;\n      return;\n    }\n  });\n  if (userToRemove) {\n    delete this.users[userToRemove];\n    //highlight-start\n    // remove user from any joined rooms\n    const rooms = Object.keys(this.chatRooms);\n    rooms.forEach((room) => {\n      this.leaveRoom(room, userToRemove);\n    });\n    //highlight-end\n  }\n  //highlight-next-line\n  return userToRemove;\n}\n")),(0,a.kt)("h3",{id:"update-chat-gateway"},"Update chat gateway"),(0,a.kt)("p",null,"When client identifies, return list of rooms as some initial data it will need:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"@SubscribeMessage('identify')\nasync handleIdentify(client: Socket, user: string) {\n  this.chatService.identify(user, client.id);\n  //highlight-next-line\n  return this.chatService.getRooms();\n}\n")),(0,a.kt)("p",null,"add handleJoinRoom/handleLeaveRoom methods:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"@SubscribeMessage('joinRoom')\nhandleJoinRoom(client: Socket, data: { user: string; room: string }) {\n  this.chatService.joinRoom(data.room, data.user);\n  client.join(data.room);\n  client.to(data.room).emit('userJoined', data.user);\n  return this.chatService.getChatRoom(data.room);\n}\n\n@SubscribeMessage('leaveRoom')\nhandleLeaveRoom(client: Socket, data: { user: string; room: string }) {\n  this.chatService.leaveRoom(data.room, data.user);\n  client.leave(data.room);\n  client.to(data.room).emit('userLeft', data.user);\n}\n")),(0,a.kt)("p",null,"update disconnect method to emit user left room"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"@SubscribeMessage('disconnect')\nasync handleDisconnect(client: Socket) {\n  //highlight-start\n  const user = this.chatService.disconnect(client.id);\n  client.broadcast.emit('userLeft', user);\n  //highlight-end\n}\n")),(0,a.kt)("h2",{id:"angular"},"Angular"),(0,a.kt)("h3",{id:"update-chat-service-1"},"Update chat service"),(0,a.kt)("p",null,"add Message & ChatRoom interface to top:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export interface Message {\n  user: string;\n  content: string;\n}\n\nexport interface ChatRoom {\n  users: string[];\n  messages: Message[];\n}\n")),(0,a.kt)("p",null,"add activeRoom, chatRoom, and rooms to ChatApp data interface:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export interface ChatAppData {\n  //highlight-next-line\n  activeRoom: string;\n  //highlight-next-line\n  chatRoom: ChatRoom;\n  connected: boolean;\n  //highlight-next-line\n  rooms: string[];\n}\n")),(0,a.kt)("p",null,"add $activeRoom, $chatRoom and $rooms members"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"private $activeRoom = new BehaviorSubject('General');\nprivate $chatRoom = new BehaviorSubject<ChatRoom>({\n  users: [],\n  messages: [],\n});\nprivate $rooms = new BehaviorSubject<string[]>([]);\n")),(0,a.kt)("p",null,"update ",(0,a.kt)("inlineCode",{parentName:"p"},"getChatAppData")," to include new data:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"getChatAppData(): Observable<ChatAppData> {\n  const data = combineLatest([\n    this.$activeRoom,\n    this.$chatRoom,\n    this.$connected,\n    this.$rooms,\n    this.$user,\n  ]).pipe(\n    map((value) => {\n      const [activeRoom, chatRoom, connected, rooms, user] = value;\n      return {\n        activeRoom,\n        chatRoom,\n        connected,\n        rooms,\n        user,\n      };\n    })\n  );\n  return data;\n}\n")),(0,a.kt)("p",null,"add callback to identify method to get the list of rooms and set them"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"this.client.on('connect', () => {\n  //highlight-start\n  this.client.emit('identify', this.$user.value, (rooms: string[]) => {\n    this.$rooms.next(rooms);\n  });\n  //highlight-end\n  this.$connected.next(true);\n});\n")),(0,a.kt)("p",null,"add userJoined/userLeft socket listeners in constructor:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"this.client.on('userJoined', (user: string) => {\n  const chatRoom = this.$chatRoom.value;\n  if (chatRoom) {\n    chatRoom.users.push(user);\n    chatRoom.users.sort((a, b) => {\n      return a.toLowerCase() >= b.toLowerCase() ? 1 : -1;\n    });\n    this.$chatRoom.next(chatRoom);\n  }\n});\nthis.client.on('userLeft', (user: string) => {\n  const chatRoom = this.$chatRoom.value;\n  if (chatRoom) {\n    chatRoom.users = chatRoom.users.filter((u) => u !== user);\n    this.$chatRoom.next(chatRoom);\n  }\n});\n")),(0,a.kt)("p",null,"add joinRoom/leaveRoom/switchRoom methods:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"joinRoom(room: string) {\n  this.client.emit(\n    'joinRoom',\n    { user: this.$user.value, room },\n    (chatRoom: ChatRoom) => {\n      this.$chatRoom.next(chatRoom);\n    }\n  );\n}\n\nleaveRoom(room: string) {\n  this.client.emit('leaveRoom', { user: this.$user.value, room });\n}\n\nswitchRoom(room: string) {\n  const activeRoom = this.$activeRoom.value;\n  this.leaveRoom(activeRoom);\n  this.joinRoom(room);\n  this.$activeRoom.next(room);\n}\n")),(0,a.kt)("p",null,"in connect, add a call to join room"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"connect(user: string) {\n  if (this.client.connected) {\n    return;\n  }\n  localStorage.setItem('user', user);\n  this.$user.next(user);\n  this.client.connect();\n  //highlight-next-line\n  this.joinRoom(this.$activeRoom.value);\n}\n")),(0,a.kt)("p",null,"in disconnect, add call to leave room:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"disconnect() {\n  localStorage.removeItem('user');\n  //highlight-next-line\n  this.leaveRoom(this.$activeRoom.value);\n  this.client.disconnect();\n  this.$user.next('');\n}\n")),(0,a.kt)("h3",{id:"update-app-component"},"Update app component"),(0,a.kt)("p",null,"add switchRoom method:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"switchRoom(room: string) {\n  this.chatService.switchRoom(room);\n}\n")),(0,a.kt)("h3",{id:"update-app-component-html"},"update app component html"),(0,a.kt)("p",null,"switch out roooms li with new one:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},'<li\n  [ngClass]="{ active: data.activeRoom === room }"\n  (click)="switchRoom(room)"\n  *ngFor="let room of data.rooms"\n>\n  {{ room }}\n</li>\n')),(0,a.kt)("p",null,"replace hard coded room name with activeroom:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},'<div class="user">Welcome {{ user }}, Room {{ data.activeRoom }}</div>\n')),(0,a.kt)("p",null,"replace users li with new one:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},'<li *ngFor="let user of data.chatRoom.users">{{ user }}</li>\n')),(0,a.kt)("p",null,"now you can switch between rooms and see users entering/leaving rooms"))}u.isMDXComponent=!0}}]);