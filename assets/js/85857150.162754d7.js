"use strict";(self.webpackChunkguide_generator=self.webpackChunkguide_generator||[]).push([[161],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var n=a(7294);function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){s(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,s=function(e,t){if(null==e)return{};var a,n,s={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var o=n.createContext({}),c=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,s=e.mdxType,r=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(a),h=s,g=d["".concat(o,".").concat(h)]||d[h]||m[h]||r;return a?n.createElement(g,i(i({ref:t},p),{},{components:a})):n.createElement(g,i({ref:t},p))}));function h(e,t){var a=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=a.length,i=new Array(r);i[0]=d;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:s,i[1]=l;for(var c=2;c<r;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},3284:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var n=a(7462),s=(a(7294),a(3905));const r={sidebar_position:4},i="Sending Messages",l={unversionedId:"lab2/Messages",id:"lab2/Messages",title:"Sending Messages",description:"What's a chat app that can't send messages? Not much. So let's fix that.",source:"@site/docs/lab2/Messages.md",sourceDirName:"lab2",slug:"/lab2/Messages",permalink:"/ng-nest-realtime-apps/lab2/Messages",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"demoSidebar",previous:{title:"Joining and Leaving Rooms",permalink:"/ng-nest-realtime-apps/lab2/JoiningAndLeavingRooms"}},o={},c=[{value:"Nest",id:"nest",level:2},{value:"ChatService",id:"chatservice",level:3},{value:"Add Messages to Chat Room",id:"add-messages-to-chat-room",level:4},{value:"ChatGateway",id:"chatgateway",level:3},{value:"Handle Message Events",id:"handle-message-events",level:4},{value:"Angular",id:"angular",level:2},{value:"ChatService",id:"chatservice-1",level:3},{value:"Add Message Event Listener",id:"add-message-event-listener",level:4},{value:"Add sendMessage Method",id:"add-sendmessage-method",level:4},{value:"AppComponent",id:"appcomponent",level:3},{value:"Send Message to Service",id:"send-message-to-service",level:4},{value:"AppComponent Template",id:"appcomponent-template",level:3},{value:"Update Messages List",id:"update-messages-list",level:4}],p={toc:c};function m(e){let{components:t,...a}=e;return(0,s.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"sending-messages"},"Sending Messages"),(0,s.kt)("p",null,"What's a chat app that can't send messages? Not much. So let's fix that."),(0,s.kt)("h2",{id:"nest"},"Nest"),(0,s.kt)("h3",{id:"chatservice"},"ChatService"),(0,s.kt)("h4",{id:"add-messages-to-chat-room"},"Add Messages to Chat Room"),(0,s.kt)("p",null,"We already have the infrastructure to store chat rooms and\nmessages in the ",(0,s.kt)("inlineCode",{parentName:"p"},"chatRooms")," variable. We only need to add a\nmethod to the service that will add a message to the appropriate chat room. Add\nthis method to the ",(0,s.kt)("inlineCode",{parentName:"p"},"ChatService")," class:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./server/src/chat/chat.service.ts",title:"./server/src/chat/chat.service.ts"},"addMessage(room: string, message: Message) {\n  this.chatRooms[room].messages.push(message);\n}\n")),(0,s.kt)("h3",{id:"chatgateway"},"ChatGateway"),(0,s.kt)("h4",{id:"handle-message-events"},"Handle Message Events"),(0,s.kt)("p",null,"Add a new event handler to listen for ",(0,s.kt)("inlineCode",{parentName:"p"},"messageToServer")," events:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./server/src/chat.gateway.ts",title:"./server/src/chat.gateway.ts"},"@SubscribeMessage('messageToServer')\nhandleMessageToServer(\n  client: Socket,\n  data: {\n    room: string;\n    message: Message;\n  },\n) {\n  this.chatService.addMessage(data.room, data.message);\n  client.to(data.room).emit('messageToClient', data.message);\n  client.emit('messageToClient', data.message);\n}\n")),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Message is imported from './chat/chat.service'")),(0,s.kt)("p",null,"To make things a bit easier, we define two different events: ",(0,s.kt)("inlineCode",{parentName:"p"},"messageToServer"),"\nthat gets called when a client sends a message to the server, and\n",(0,s.kt)("inlineCode",{parentName:"p"},"messageToClient"),", when the message is sent out to all the other clients."),(0,s.kt)("p",null,"This handler listens for ",(0,s.kt)("inlineCode",{parentName:"p"},"messageToServer"),", and adds the new message to the chat\nservice then broadcasts the message back to the clients with\n",(0,s.kt)("inlineCode",{parentName:"p"},"messageToClient"),"."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"client.to()")," will send the message to all other clients in the room except for\nthe current client. Therefore, we send the same message to the current\nclient with ",(0,s.kt)("inlineCode",{parentName:"p"},"client.emit()"),"."),(0,s.kt)("h2",{id:"angular"},"Angular"),(0,s.kt)("h3",{id:"chatservice-1"},"ChatService"),(0,s.kt)("h4",{id:"add-message-event-listener"},"Add Message Event Listener"),(0,s.kt)("p",null,"In the Angular ",(0,s.kt)("inlineCode",{parentName:"p"},"ChatService"),", we will add a listener for incoming messages. Add\nthe following in the constructor below the other listeners:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./client/src/app/chat.service.ts",title:"./client/src/app/chat.service.ts"},"this.client.on('messageToClient', (message: Message) => {\n  const chatRoom = this.chatRoom$.value;\n  if (chatRoom) {\n    chatRoom.messages.push(message);\n    this.chatRoom$.next(chatRoom);\n  }\n});\n")),(0,s.kt)("h4",{id:"add-sendmessage-method"},"Add sendMessage Method"),(0,s.kt)("p",null,"Next, add the ",(0,s.kt)("inlineCode",{parentName:"p"},"sendMessage")," method, which will emit the ",(0,s.kt)("inlineCode",{parentName:"p"},"messageToServer")," event\nand pass along the user's message."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./client/src/app/chat.service.ts",title:"./client/src/app/chat.service.ts"},"sendMessage(content: string) {\n  const message = {\n    user: this.user$.value,\n    content\n  };\n  this.client.emit('messageToServer', {\n    room: this.activeRoom$.value,\n    message,\n  });\n}\n")),(0,s.kt)("h3",{id:"appcomponent"},"AppComponent"),(0,s.kt)("h4",{id:"send-message-to-service"},"Send Message to Service"),(0,s.kt)("p",null,"Update the current ",(0,s.kt)("inlineCode",{parentName:"p"},"sendMessage")," method that is empty to the following:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=./client/src/app/app.component.ts",title:"./client/src/app/app.component.ts"},"sendMessage() {\n  if (this.message) {\n    this.chatService.sendMessage(this.message);\n    this.message = '';\n  }\n}\n")),(0,s.kt)("p",null,"This method is bound to the Send button in the UI."),(0,s.kt)("h3",{id:"appcomponent-template"},"AppComponent Template"),(0,s.kt)("h4",{id:"update-messages-list"},"Update Messages List"),(0,s.kt)("p",null,"Around line 33, update the div with the class of messages."),(0,s.kt)("p",null,"Replace:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-html",metastring:"title=./client/src/app/app.component.html",title:"./client/src/app/app.component.html"},'<div class="messages">\n  <ul>\n    <li>[user]: message</li>\n  </ul>\n</div>\n')),(0,s.kt)("p",null,"With:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-html",metastring:"title=./client/src/app/app.component.html",title:"./client/src/app/app.component.html"},'<div\n  *ngIf="data.chatRoom.messages.length > 0; else noMessages"\n  class="messages"\n>\n  <ul>\n    <li *ngFor="let message of data.chatRoom.messages">\n      [{{ message.user }}]: {{ message.content }}\n    </li>\n  </ul>\n</div>\n')),(0,s.kt)("p",null,"And with that, you should have a fully functioning chat app! Give it a try."))}m.isMDXComponent=!0}}]);